Sub ProcessFilesForEmployees()
    Dim wb As Workbook
    Dim wsReport As Worksheet
    Dim ws As Worksheet
    Dim tblEmployee As ListObject
    Dim tblEmployeePZ As ListObject
    Dim cellDate As Range

    Dim folderPath As String
    Dim availableFiles As Collection
    Dim referenceDate As Date
    Dim fileCounter As Integer
    
    ' Установки
    Set wb = ThisWorkbook
    Set wsReport = wb.Sheets("Отчет ГД") ' Лист с ячейкой R1
    Set ws = wb.Sheets("Sheet1") ' Замените "Sheet1" на имя вашего листа
    Set tblEmployee = ws.ListObjects("сотрудник")
    Set tblEmployeePZ = ws.ListObjects("сотрудник_ПЗ")
    Set cellDate = wsReport.Range("R1")
    folderPath = wb.Path & "\"

    ' Очистка таблицы сотрудник_ПЗ
    tblEmployeePZ.DataBodyRange.ClearContents

    ' Чтение референтной даты
    referenceDate = cellDate.Value

    ' Поиск подходящих файлов
    Set availableFiles = New Collection
    Dim fileName As String
    fileName = Dir(folderPath & "*123*.xls*")
    
    Do While fileName <> ""
        availableFiles.Add fileName
        fileName = Dir()
    Loop

    If availableFiles.Count = 0 Then
        MsgBox "Не найдено файлов, содержащих '123' в имени.", vbExclamation
        Exit Sub
    End If

    ' Сортируем файлы по близости к референтной дате
    Dim sortedFiles As Collection
    Set sortedFiles = New Collection

    Dim fileDates As Collection
    Set fileDates = New Collection

    Dim tempDict As Object
    Set tempDict = CreateObject("Scripting.Dictionary")

    Dim fName As Variant
    Dim fileDate As Date
    Dim nameParts() As String
    For Each fName In availableFiles
        On Error Resume Next
        ' Предположим, что у вас формат имени файла такой: "название_дата123.xls*" (например "отчет_01012023123.xls")
        nameParts = Split(fName, "_")
        On Error GoTo 0
        If UBound(nameParts) >= 1 Then
            fileDate = DateSerial(Mid(nameParts(1), 5, 4), Mid(nameParts(1), 3, 2), Mid(nameParts(1), 1, 2))
            tempDict.Add CStr(fileDate), fName ' Используем строковое представление даты как ключ для словаря
        End If
    Next fName

    If tempDict.Count = 0 Then
        MsgBox "Не удалось определить даты файлов.", vbExclamation
        Exit Sub
    End If

    ' Сортируем словарь по ключу (дате) относительно referenceDate
    Dim keys As Variant
    Dim sortedKeys As Variant
    keys = tempDict.Keys
    sortedKeys = SortDates(keys, referenceDate)
    
    ' Заполняем sortedFiles коллекцию
    fileCounter = 0
    For Each key In sortedKeys
        fileCounter = fileCounter + 1
        sortedFiles.Add tempDict(key)
        If fileCounter = 5 Then Exit For ' Берем не более 5 файлов
    Next key

    ' Процессим файлы
    Dim fullFilePath As String
    Dim wbNew As Workbook

    For Each fName In sortedFiles
        fullFilePath = folderPath & fName
        Debug.Print "Открываем файл: " & fullFilePath
        If Dir(fullFilePath) <> "" Then
            ' Проверка на существование файла
            If Dir(fullFilePath) <> "" Then
                ' Пробуем открыть файл
                On Error Resume Next
                Set wbNew = Workbooks.Open(fullFilePath)
                If wbNew Is Nothing Then
                    MsgBox "Ошибка при открытии файла: " & fullFilePath, vbExclamation
                Else
                    Debug.Print "Файл открыт: " & fullFilePath
                    Call ProcessEmployeeData(wb, wbNew, tblEmployee, tblEmployeePZ)
                    wbNew.Close False
                End If
                On Error GoTo 0
            Else
                MsgBox "Не удалось найти файл: " & fullFilePath, vbExclamation
            End If
        End If
    Next fName

    MsgBox "Обработка завершена.", vbInformation
End Sub

Private Sub ProcessEmployeeData(wb As Workbook, wbNew As Workbook, tblEmployee As ListObject, tblEmployeePZ As ListObject)
    ' Получаем дату из имени файла
    Dim nameParts() As String
    nameParts = Split(wbNew.Name, "_")
    Dim dataDate As Date
    dataDate = DateSerial(Mid(nameParts(UBound(nameParts)), 5, 4), Mid(nameParts(UBound(nameParts)), 3, 2), Mid(nameParts(UBound(nameParts)), 1, 2))

    ' Вставляем дату в колонку "Дата" таблицы сотрудник_ПЗ
    tblEmployeePZ.ListColumns("Дата").DataBodyRange(1).Value = dataDate

    ' Проходим по сотрудникам из таблицы "сотрудник"
    Dim empRow As ListRow
    Dim employeeName As String
    Dim i As Long
    Dim colName As Variant
    Dim searchRange As Range
    Dim cel As Range
    Dim count1 As Long
    Dim count2 As Long
    Dim empCol As Long
    Dim cellValue As Variant

    For Each empRow In tblEmployee.ListRows
        employeeName = empRow.Range(1, tblEmployee.ListColumns("имя").Index).Value
        count1 = 0
        count2 = 0

        ' Проходим по столбцам P, U, Z, AE
        For Each colName In Array("P", "U", "Z", "AE")
            Dim lastRow As Long
            lastRow = wbNew.Sheets(1).Cells(wbNew.Sheets(1).Rows.Count, colName).End(xlUp).Row
            Set searchRange = wbNew.Sheets(1).Range(colName & "2:" & colName & lastRow)

            ' Считываем значения в колонках и считаем количество вхождений и превышений
            For Each cel In searchRange.Cells
                If InStr(cel.Value, employeeName) > 0 Then
                    count1 = count1 + 1
                    ' Проверка типа данных и наличия значения
                    cellValue = cel.Offset(0, -1).Value
                    If IsNumeric(cellValue) And Not IsEmpty(cellValue) Then
                        If CDec(Replace(cellValue, ".", ",")) > 3 Then
                            count2 = count2 + 1
                        End If
                    End If
                End If
            Next cel
        Next colName

        ' Записываем результаты в таблицу "сотрудник_ПЗ"
        empCol = (empRow.Index - 1) * 4
        tblEmployeePZ.DataBodyRange(1, empCol + 2).Value = count1
        tblEmployeePZ.DataBodyRange(1, empCol + 4).Value = count2
    Next empRow
End Sub

Private Function SortDates(dates As Variant, reference As Date) As Variant
    ' Функция для сортировки дат по близости к заданной дате
    Dim i As Long, j As Long
    Dim temp As Date

    ' Используем метод пузырьковой сортировки
    For i = LBound(dates) To UBound(dates) - 1
        For j = i + 1 To UBound(dates)
            If Abs(CDate(dates(i)) - reference) > Abs(CDate(dates(j)) - reference) Then
                temp = dates(i)
                dates(i) = dates(j)
                dates(j) = temp
            End If
        Next j
    Next i

    SortDates = dates
End Function
